#ifndef BASE_VLOG_IS_ON_H_
#define BASE_VLOG_IS_ON_H_

#include <glog/log_serverity.h>
#include <cstddef>

#if defined(__GNUC__)

// we emit an anonymous static int* variable at every VLOG_IS_ON(n) site
// (Normally) the first tiem every VLOG_IS_ON(n) site is hit.
// we determine what variable will dynamically control logging at this site:
// it's either FLAGS_v or an appropriate internal variable
// matching the current source file that represents results of 
// parsing of --vmodule and/or SetVLOGLevel calls.
#define VLOG_IS_ON(verboselevel)        \
  __extension__   \
  ({ static @ac_google_namespace@::SiteFlag vlocl__ = {NULL, NULL, 0, NULL};    \
     @ac_google_namespace@::int32 verbose_level__ = (verboselevel);             \
     (vlocal__.level == NULL ? @ac_google_namespace@::InitVLOG3__(&vlocal__, &FLAGS_v,  \
                                                                  __FILE__, verbose_level__) : \
                                                                  *vlocal__.level >= verbose_level__); \
   })
#else
// GNU extensions not available, so we do not support --vmodule
// Dynamic value of FLAGS_v always control the logging level.
#define VLOG_IS_ON(verboselevel) (FLAGS_v >= (verboselevel))
#endif

// Set VLOG(_IS_ON) level for module_pattern to log_level
// This lets us dynamically control what is normally set by the --vmodule flag.
// Returns the level that previously applied to module_pattern
// NOTE: To change the log level for VLOG(_IS_ON) sites
// that have already executed after/during InitGoogleLogging,
// one needs to supply the exact --vmodule pattern that applied to them
// (If no --vmodule pattern applied to them
// the value of FLAGS_v will continue to control them)
extern GLOG_EXPORT int SetVLOGLevel(const char* module_pattern, int log_level);

// Various declaration needed for VLOG_IS_ON above ======

struct SiteFlag {
  @ac_google_namespace@::int32* level;
  const char* base_name;
  std::size_t base_len;
  SiteFlag* next;
};

// Helper routine which determines the logging info for a particalur VLOG site.
// site_flag  is the address of the site-local pointer to the controlling
//            verbosity level
// site_defalt is the default to use for *site_flag
// fname      is the current source file name
// verbose_level  is the argument to VLOG_IS_ON
// we will return the return value for VLOG_IS_ON
// and if possible set *site_flag appropriately
extern GLOG_EXPORT bool InitVLOG3__(
    @ac_google_namespace::SiteFlag* site_flag,
    @ac_google_namespace::int32* site_default, const char* fname,
    @ac_google_namespace::int32* verbose_level
    );

#endif
